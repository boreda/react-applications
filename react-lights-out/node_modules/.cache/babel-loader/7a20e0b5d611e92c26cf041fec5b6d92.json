{"ast":null,"code":"import _slicedToArray from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: [[false, false, false, true], [true, true, true, false], [false, true, false, false], [true, true, true, false]]\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [[false, false, false, true], [true, true, true, false], [false, true, false, true]]; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var boardComponent = this.state.board.map(function (r, index) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: index + 1,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 7\n          }\n        }, r.map(function (c, ls) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: index + 1 + \"-\" + ls,\n            isLit: false,\n            flipCellsAroundMe: _this2.flipCellsAround(r, c),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 11\n            }\n          });\n        }));\n      }); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          backgroundColor: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }\n      }, boardComponent))); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 3,\n  ncols: 4,\n  chanceLightStartsOn: Float32Array\n};\nexport default Board;","map":{"version":3,"sources":["D:/React/react-applications/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","coord","ncols","nrows","split","map","Number","y","x","flipCell","boardComponent","r","index","c","ls","flipCellsAround","backgroundColor","defaultProps","chanceLightStartsOn","Float32Array"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component { \n  static defaultProps = {\n   nrows: 3,\n   ncols: 4,\n   chanceLightStartsOn: Float32Array   \n  }\n\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state={\n      hasWon: false,\n      board: [\n        [false, false, false, true],\n        [true, true, true, false],\n        [false, true, false, false],\n        [true, true, true, false]\n      ]\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board= [\n      [false, false, false, true],\n      [true, true, true, false],\n      [false, true, false, true]\n    ]\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    const boardComponent = this.state.board.map((r, index)=>(\n      <tr key={index+1}>\n        {r.map((c, ls)=>\n          <Cell key={index+1+\"-\"+ls} isLit={false} flipCellsAroundMe={this.flipCellsAround(r, c)}/>\n        )}\n      </tr>\n    ))\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    return(\n      <div style={{backgroundColor: 'white'}}>\n        <table>\n          <tbody>\n            {boardComponent}\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\React\\\\react-applications\\\\react-lights-out\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // this.flipCellsAround = this.flipCellsAround.bind(this);\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(coord);\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      var hasWon = board.every(function (row) {\n        return row.every(function (col) {\n          return !col;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return /*#__PURE__*/React.createElement(\"h1\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 14\n          }\n        }, \"YOU WON with NEON EFFECT !!\");\n      }\n\n      var boardComponent = this.state.board.map(function (r, index) {\n        return /*#__PURE__*/React.createElement(\"tr\", {\n          key: index,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }\n        }, r.map(function (c, ls) {\n          return /*#__PURE__*/React.createElement(Cell, {\n            key: index + \"-\" + ls,\n            isLit: _this2.state.board[index][ls],\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(index + \"-\" + ls);\n            },\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 11\n            }\n          });\n        }));\n      }); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      }, \"Lights\"), /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 32\n        }\n      }, \" Out\")), /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, boardComponent))); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["D:/React/react-applications/react-lights-out/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","flipCell","every","col","setState","boardComponent","r","index","c","ls","flipCellsAround","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\nclass Board extends Component { \n  static defaultProps = {\n   nrows: 5,\n   ncols: 5,\n   chanceLightStartsOn: 0.25   \n  }\n\n  constructor(props) {\n    super(props);\n    this.state={\n      hasWon: false,\n      board: this.createBoard()\n    }\n    // this.flipCellsAround = this.flipCellsAround.bind(this);\n  }\n\n  createBoard() {\n    let board= [];\n    for(let y=0; y<this.props.nrows; y++){\n      let row=[];\n      for(let x=0; x<this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  flipCellsAround(coord) {\n    console.log(coord)\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x)\n    flipCell(y, x-1)\n    flipCell(y, x+1)\n    flipCell(y-1, x)\n    flipCell(y+1, x)\n\n    let hasWon = board.every(row=>(row.every(col => !col)))\n    this.setState({board, hasWon: hasWon});\n  }\n\n  render() {\n    if(this.state.hasWon){\n      return <h1>YOU WON with NEON EFFECT !!</h1>\n    }\n    const boardComponent = this.state.board.map((r, index)=>(\n      <tr key={index}>\n        {r.map((c, ls)=>\n          <Cell key={index+\"-\"+ls} isLit={this.state.board[index][ls]} flipCellsAroundMe={()=>this.flipCellsAround(index+\"-\"+ls)}/>\n        )}\n      </tr>\n    ))\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    return(\n      <div>\n        <h1><span>Lights</span><span> Out</span></h1>\n        <table className=\"Board\">\n          <tbody>\n            {boardComponent}\n          </tbody>\n        </table>\n      </div>\n    )\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}